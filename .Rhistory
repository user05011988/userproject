params$peak_alignment = 'N'
params$ref_pos = 8.452
if (alignment == 1) {
#Glucose
params$glucose_alignment = 'Y'
} else if (alignment == 2) {
#TSP
params$tsp_alignment = 'Y'
} else if (alignment == 3) {
#Formate
params$peak_alignment = 'Y'
}
#Suppresion regions
suppression = as.character(import_profile[10, 2])
if (suppression == '') {
params$disol_suppression = 'N'
} else {
params$disol_suppression = 'Y'
params$disol_suppression_ppm = as.numeric(strsplit(suppression, '-|;')[[1]])
params$disol_suppression_ppm = matrix(params$disol_suppression_ppm,length(params$disol_suppression_ppm) /2,2,byrow = T)
}
#Variables only necessary for reading Bruker files
bruker_path = import_profile[1, 2]
expno = as.character(import_profile[4, 2])
processingno = as.character(import_profile[5, 2])
#Variables only necessary for reading dataset in csv format
dataset_path = as.character(import_profile[2, 2])
params$dir = bruker_path
params$expno = expno
params$processingno = processingno
params$buck_step = as.numeric(as.character(import_profile[13, 2]))
params
imported_data = Metadata2Buckets(Experiments, params)
CURRENT = list()
# RAW = list(len=0)
RAW = list()
not_loaded_experiments = read_spectra = c()
left_spectral_border = ifelse(exists("left_spectral_border", where = params),
params$left_spectral_border,
12)
right_spectral_border = ifelse(exists("right_spectral_border", where = params),
params$right_spectral_border,
-1)
RAW$norm_PEAK_left_ppm = ifelse(params$norm_PEAK == "Y", params$norm_left_ppm,
0)
RAW$norm_PEAK_right_ppm = ifelse(params$norm_PEAK == "Y", params$norm_left_ppm,
0)
RAW$norm_AREA_left_ppm = ifelse(params$norm_AREA == "Y", params$norm_left_ppm,
0)
RAW$norm_AREA_right_ppm = ifelse(params$norm_AREA == "Y", params$norm_right_ppm,
0)
tsp_alignment = params$tsp_alignment
ref_peak_pos = ifelse(params$peak_alignment == "Y", params$ref_peak_pos,
0)
RAW$water_suppression_left_ppm = ifelse(params$water_suppression ==
"Y",
params$water_suppression_left_ppm,
0)
RAW$water_suppression_right_ppm = ifelse(params$water_suppression ==
"Y",
params$water_suppression_right_ppm,
0)
disol_suppression = params$disol_suppression
#DO not transform to ifelse, transforms matrix into 0
if (params$disol_suppression == "Y") {
RAW$disol_suppression_ppm=params$disol_suppression_ppm
} else {
RAW$disol_suppression_ppm=matrix(0, 1, 2)
}
k2 = 1
maxspec = length(Experiments)
for (k in 1:maxspec) {
filename = paste(params$dir, "nmr", Experiments[k], params$expno, "pdata", params$processingno, sep = "/")
partname = paste(params$dir, "nmr", Experiments[k], params$expno, sep = "/")
storedpars = topspin_read_spectrum2(partname, filename,-2, 13)
if (all(is.nan(storedpars$real)) == 0) {
CURRENT$minppm = storedpars$OFFSET - storedpars$SW
CURRENT$maxppm = storedpars$OFFSET
CURRENT$step = storedpars$SW / (length(storedpars$real) - 1)
CURRENT$ppm = seq(CURRENT$maxppm, CURRENT$minppm,-CURRENT$step)
# a partir d'ara escalarem pel guany tmp
# =(storedpars$real.*(2^(storedpars$NC_proc)))
tmp = (storedpars$real * ((2 ^ storedpars$NC_proc) / storedpars$RG))
# tmp1 =(storedpars$real.*((2^(storedpars$NC_proc))))
CURRENT$left_spectral_border = 1 + round(-(left_spectral_border -
CURRENT$maxppm) / CURRENT$step)
CURRENT$norm_PEAK_left = 1 + round(-(RAW$norm_PEAK_left_ppm -
CURRENT$maxppm) / CURRENT$step)
CURRENT$norm_PEAK_right = 1 + round(-(RAW$norm_PEAK_right_ppm -
CURRENT$maxppm) / CURRENT$step)
CURRENT$norm_AREA_left = 1 + round(-(RAW$norm_AREA_left_ppm -
CURRENT$maxppm) / CURRENT$step)
CURRENT$norm_AREA_right = 1 + round(-(RAW$norm_AREA_right_ppm -
CURRENT$maxppm) / CURRENT$step)
norm_PEAK_max = max(tmp[CURRENT$norm_PEAK_left:CURRENT$norm_PEAK_right])
norm_PEAK_max_position = which.max(tmp[CURRENT$norm_PEAK_left:CURRENT$norm_PEAK_right])
norm_AREA = sum(tmp[CURRENT$norm_AREA_left:CURRENT$norm_AREA_right])
total_AREA_mean = mean(tmp[1:length(tmp)])
# if (RAW$len == 0) {
RAW$len = length(storedpars$real)
RAW$ofs = storedpars$OFFSET
RAW$sw = storedpars$SW
RAW$ncproc = storedpars$NC_proc
RAW$minppm = storedpars$OFFSET - storedpars$SW
RAW$maxppm = storedpars$OFFSET
RAW$size = length(storedpars$real)
RAW$step = RAW$sw / (RAW$size - 1)
RAW$ppm = seq(RAW$maxppm, RAW$minppm,-RAW$step)
RAW$buck_step = ifelse(params$buck_step < RAW$step, RAW$step,
params$buck_step)
# redieixo la part dreta de l'espectre de Matlab RAW$ppm_bucks =
RAW$ppm_bucks = seq(left_spectral_border,
right_spectral_border,-RAW$buck_step)
RAW$len_bucks = length(RAW$ppm_bucks)
RAW$water_suppression_left_buck = 1 + round(-(RAW$water_suppression_left_ppm -
RAW$ppm_bucks[1]) /
RAW$buck_step)
RAW$water_suppression_right_buck = 1 + round(-(RAW$water_suppression_right_ppm -
RAW$ppm_bucks[1]) /
RAW$buck_step)
DIM = dim(RAW$disol_suppression_ppm)
RAW$disol_suppression_bucks = RAW$disol_suppression_ppm
for (nr in 1:DIM[1]) {
for (nc in 1:DIM[2]) {
RAW$disol_suppression_bucks[nr, nc] = 1 + round(-(RAW$disol_suppression_ppm[nr,
nc] - RAW$ppm_bucks[1]) /
RAW$buck_step)
}
}
RAW$norm_PEAK_max = norm_PEAK_max
RAW$total_AREA_mean = total_AREA_mean
RAW$norm_AREA = norm_AREA
RAW$differential_norm_AREA = 0
# }
if (params$norm_PEAK == "Y" &
norm_PEAK_max > 0)
tmp = tmp / norm_PEAK_max
if (params$norm_AREA == "Y" &
norm_AREA > 0)
tmp = tmp / norm_AREA
# calculem valors despres de normalitzar
norm_PEAK_max2 = max(tmp[CURRENT$norm_PEAK_left:CURRENT$norm_PEAK_right])
norm_AREA2 = sum(tmp[CURRENT$norm_AREA_left:CURRENT$norm_AREA_right])
# referenciem
LeftEreticBefore = ifelse(left_spectral_border > 11.8, min(CURRENT$ppm[which(CURRENT$ppm > 11.7)]), NaN)
}
}
params
alignment
View(import_profile)
as.numeric(import_profile[9, 2])
import_profile
View(import_profile)
import_profile[9, 2]
drop(import_profile[9, 2])
droplevels(import_profile[9, 2])
import_profile[9, 2]
alignment = import_profile[9, 2]
alignment
alignment == 2
normalization
runApp()
dim(dataset)
dataset=matrix(runif(10)2,5)
dataset=matrix(runif(10),2,5)
dataset
apply(dataset,1,rev)
dim(apply(dataset,1,rev))
t(apply(dataset,1,rev))
runApp()
parameters_path
parameters_path = "C:/Users/user/Documents/r_dolphin - csv/Parameters_portuguesos.csv"
params = list()
#Import fo parameters from the csv file
# TO DO: stringsasfactors=F
import_profile = read.delim(
parameters_path,
sep = ',',
header = T,
stringsAsFactors = F
)
import_profile = as.data.frame(sapply(import_profile, function(x)
gsub("\\\\", "/", x)))
#Getting the names of experiments, signals and ROIs to quantify and use
metadata_path = as.character(import_profile[3, 2])
dummy = read.delim(
metadata_path,
sep = ',',
header = T,
stringsAsFactors = F
)
Experiments=dummy[,1]
Experiments = as.vector(Experiments[Experiments != ''])
Metadata=dummy[,-1,drop=F]
# signals_names = read.delim(as.character(import_profile[6, 2]),
#                            header = F,
#                            stringsAsFactors = F)[, 1]
# signals_names = as.list(signals_names[signals_names != ''])
profile_folder_path = as.character(import_profile[6, 2])
ROI_data=read.csv(profile_folder_path)
signals_names=ROI_data[which(!is.na(ROI_data[, 1])),4]
signals_codes = 1:length(signals_names)
#Preparing the structure of experiments and signals where to store the output
export_path = as.character(import_profile[7, 2])
#Other necessary variables
freq = as.numeric(as.character(import_profile[11, 2]))
biofluid=import_profile[14, 2]
jres_path=as.character(import_profile[15, 2])
repository=rio::import(as.character(import_profile[12, 2]))
if (biofluid=='Urine') {
repository=repository[which(repository[,3]==1),]
} else if (biofluid=='Serum') {
repository=repository[which(repository[,2]==1),]
} else {
}
#Kind of normalization
#TO DO: add PQN (but before standardize a way to find the regions to have into account)
normalization = import_profile[8, 2]
pqn='N'
params$norm_AREA = 'N'
params$norm_PEAK = 'N'
params$norm_left_ppm = 12
params$norm_right_ppm = -1
if (normalization == 1) {
#Eretic
params$norm_AREA = 'Y'
params$norm_left_ppm = 11.53
params$norm_right_ppm = 10.47
} else if (normalization == 2) {
#TSP
params$norm_AREA = 'Y'
params$norm_left_ppm = 0.1
params$norm_right_ppm = -0.1
} else if (normalization == 3) {
#Creatinine (intensity, not area, maybe dangerous for rats because of oxalacetate)
params$norm_PEAK = 'Y'
params$norm_left_ppm = 3.10
params$norm_right_ppm = 3
} else if (normalization == 4) {
#Spectrum AreA
params$norm_AREA = 'Y'
} else if (normalization == 5) {
#No normailzation
} else if (normalization == 6) {
#No normailzation
params$norm_AREA = 'Y'
pqn='Y'
}
params
alignment = import_profile[9, 2]
params$glucose_alignment = 'N'
params$tsp_alignment = 'N'
params$peak_alignment = 'N'
params$ref_pos = 8.452
if (alignment == 1) {
#Glucose
params$glucose_alignment = 'Y'
} else if (alignment == 2) {
#TSP
params$tsp_alignment = 'Y'
} else if (alignment == 3) {
#Formate
params$peak_alignment = 'Y'
}
alignment
import_profile[9, 2]
alignment = import_profile[9, 2]
params$glucose_alignment = 'N'
params$tsp_alignment = 'N'
params$peak_alignment = 'N'
params$ref_pos = 8.452
if (alignment == 1) {
#Glucose
params$glucose_alignment = 'Y'
} else if (alignment == 2) {
#TSP
params$tsp_alignment = 'Y'
} else if (alignment == 3) {
#Formate
params$peak_alignment = 'Y'
}
suppression = as.character(import_profile[10, 2])
if (suppression == '') {
params$disol_suppression = 'N'
} else {
params$disol_suppression = 'Y'
params$disol_suppression_ppm = as.numeric(strsplit(suppression, '-|;')[[1]])
params$disol_suppression_ppm = matrix(params$disol_suppression_ppm,length(params$disol_suppression_ppm) /2,2,byrow = T)
}
bruker_path = import_profile[1, 2]
expno = as.character(import_profile[4, 2])
processingno = as.character(import_profile[5, 2])
#Variables only necessary for reading dataset in csv format
dataset_path = as.character(import_profile[2, 2])
dataset_path != ''
imported_data = list()
dummy = rio::import(dataset_path, sep = ',',header=F,colClasses='numeric')
pa=dim(dummy[-1,])
imported_data$dataset=as.numeric(as.matrix(dummy[-1,]))
imported_data$dataset[is.na(imported_data$dataset)]=0
dim(imported_data$dataset)=pa
colnames(imported_data$dataset) = dummy[1,]
imported_data$ppm = round(as.numeric(dummy[1,]),4)
rownames(imported_data$dataset) = Experiments
if (params$disol_suppression == 'Y') {
for (i in dim(params$disol_suppression_ppm)[1]) imported_data$dataset[,which.min(abs(imported_data$ppm-params$disol_suppression_ppm[i,1])):which.min(abs(imported_data$ppm-params$disol_suppression_ppm[i,2]))] = 0
}
if (alignment == 1) {
#Glucose
limi=c(5.5,5.1)
} else if (alignment == 2) {
#TSP
limi=c(0.1,-0.1)
} else if (alignment == 3) {
#Formate
limi=c(8.48,8.42)
}
if (alignment<=3) {
spectra_lag=rep(NA,dim(imported_data$dataset)[1])
for (i in 1:dim(imported_data$dataset)[1]) {
d <-
ccf(imported_data$dataset[i, which.min(abs(imported_data$ppm-limi[1])):which.min(abs(imported_data$ppm-limi[2]))],
apply(imported_data$dataset[, which.min(abs(imported_data$ppm-limi[1])):which.min(abs(imported_data$ppm-limi[2]))], 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(length(imported_data$ppm)-max(abs(spectra_lag)))
for (i in 1:dim(imported_data$dataset)[1])   imported_data$dataset[i,so-spectra_lag[i]]=imported_data$dataset[i,so]
}
if (params$norm_AREA == 'Y') {
for (i in 1:dim(imported_data$dataset)[1])
imported_data$dataset[i,]=imported_data$dataset[i,]*mean(rowSums(imported_data$dataset[,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))]))/sum(imported_data$dataset[i,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))])
} else if (params$norm_PEAK == 'Y') {
for (i in 1:dim(imported_data$dataset)[1])
imported_data$dataset[i,]=imported_data$dataset[i,]*mean(apply(imported_data$dataset[,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))],1,max))/sum(imported_data$dataset[i,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))])
}
alignment
alignment<=3
alignment
alignment!=4
if (alignment!=4) {
spectra_lag=rep(NA,dim(imported_data$dataset)[1])
for (i in 1:dim(imported_data$dataset)[1]) {
d <-
ccf(imported_data$dataset[i, which.min(abs(imported_data$ppm-limi[1])):which.min(abs(imported_data$ppm-limi[2]))],
apply(imported_data$dataset[, which.min(abs(imported_data$ppm-limi[1])):which.min(abs(imported_data$ppm-limi[2]))], 2, median),
type = 'covariance',
plot = FALSE)
spectra_lag[i]=d$lag[which.max(d$acf)]
}
so=(1+max(abs(spectra_lag))):(length(imported_data$ppm)-max(abs(spectra_lag)))
for (i in 1:dim(imported_data$dataset)[1])   imported_data$dataset[i,so-spectra_lag[i]]=imported_data$dataset[i,so]
}
if (params$norm_AREA == 'Y') {
for (i in 1:dim(imported_data$dataset)[1])
imported_data$dataset[i,]=imported_data$dataset[i,]*mean(rowSums(imported_data$dataset[,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))]))/sum(imported_data$dataset[i,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))])
} else if (params$norm_PEAK == 'Y') {
for (i in 1:dim(imported_data$dataset)[1])
imported_data$dataset[i,]=imported_data$dataset[i,]*mean(apply(imported_data$dataset[,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))],1,max))/sum(imported_data$dataset[i,which.min(abs(imported_data$ppm-params$norm_left_ppm)):which.min(abs(imported_data$ppm-params$norm_right_ppm))])
}
params$buck_step = ifelse(
as.character(import_profile[13, 2]) == '',
abs(imported_data$ppm[1] - imported_data$ppm[length(imported_data$ppm)]) /
length(imported_data$ppm),
as.numeric(as.character(import_profile[13, 2]))
)
}
params$buck_step = ifelse(
as.character(import_profile[13, 2]) == '',
abs(imported_data$ppm[1] - imported_data$ppm[length(imported_data$ppm)]) /
length(imported_data$ppm),
as.numeric(as.character(import_profile[13, 2]))
)
imported_data$dataset[is.na(imported_data$dataset)]=min(abs(imported_data$dataset)[abs(imported_data$dataset)>0])
if (pqn=='Y') {
tra=rep(NA,20)
vardata3=apply(imported_data$dataset,2,function(x) sd(x,na.rm=T)/mean(x,na.rm=T))
ss=boxplot.stats(vardata3)$out
vardata3=vardata3[!(vardata3 %in% ss)]
param=seq(5,100,5)*max(vardata3,na.rm=T)/100
dummy=imported_data$dataset
ll=c(intersect(which(imported_data$ppm>5.6),which(imported_data$ppm<6.1)),intersect(which(imported_data$ppm>4.6),which(imported_data$ppm<4.9)),intersect(which(imported_data$ppm>-0.5),which(imported_data$ppm<0.5)))
dummy[,ll]=0
for (i in 1:length(param)) {
s=plele(param[i],dummy,vardata3);
tra[i]=median(s$lol2[apply(imported_data$dataset,2,function(x) median(x,na.rm=T))>median(imported_data$dataset,na.rm=T)],na.rm=T);
}
s=plele(param[which.min(tra)],dummy,vardata3);
imported_data$dataset=imported_data$dataset/s$pqndatanoscale
}
imported_data$dataset=  imported_data$dataset[,which(apply(imported_data$dataset,2,function(x) all(is.na(x)))==F)]
imported_data$ppm=imported_data$ppm[which(!is.na(imported_data$ppm))]
imported_data$ppm[1]<imported_data$ppm[2]
imported_data$ppm=rev(imported_data$ppm)
imported_data$dataset=t(apply(imported_data$dataset,1,rev))
plot(imported_data$dataset[1,])
which.max(imported_data$dataset[1,])
runApp()
runApp()
runApp()
runApp()
runApp()
signals_diff
runApp()
runApp()
parameters_path = "C:/Users/user/Documents/r_dolphin - csv/Parameters_portuguesos.csv"
imported_data = import_data(parameters_path)
if (!dir.exists(imported_data$export_path))
dir.create(imported_data$export_path)
for (i in seq_along(imported_data$Experiments)) {
if (!dir.exists(file.path(imported_data$export_path, imported_data$Experiments[i]))) {
dir.create(file.path(imported_data$export_path, imported_data$Experiments[i]))
}
}
#creation of list with the different final outputs
finaloutput = list()
dummy = matrix(NaN,
dim(imported_data$dataset)[1],
length(imported_data$signals_names))
ROI_data = read.csv(imported_data$profile_folder_path, stringsAsFactors = F)
imported_data$signals_names=paste(imported_data$signals_names,ROI_data[1:dim(dummy)[2],7],sep='_')
rownames(dummy) = imported_data$Experiments
colnames(dummy) = imported_data$signals_names
finaloutput$Area = finaloutput$signal_area_ratio = finaloutput$fitting_error =
finaloutput$shift = finaloutput$intensity = finaloutput$width = dummy
#creation of several outputs with data of interest before beginnig the quantification
write.csv(
as.data.frame(imported_data$params),
file.path(imported_data$export_path, 'initialparams.csv'),
row.names = F
)
colnames(imported_data$dataset) = imported_data$ppm
rownames(imported_data$dataset) = imported_data$Experiments
write.csv(imported_data$dataset,
file.path(imported_data$export_path, 'initialdataset.csv'),row.names=F)
if ("not_loaded_experiments" %in% names(imported_data))
write.table(
imported_data$not_loaded_experiments,
file.path(imported_data$export_path, 'not_loaded_experiments.csv'),
row.names = F,
col.names = F
)
# write.table(
#   t(as.data.frame(imported_data$signals_names)),
#   file.path(imported_data$export_path, 'used_library.csv'),
#   row.names = F,
#   col.names = F
# )
#creation of a folder for every experiment
# for (i in seq_along(imported_data$Experiments))
#   if (!dir.exists(file.path(export_path, imported_data$Experiments[i])))
#     dir.create(file.path(export_path, imported_data$Experiments[i]))
#creation of list of necessary parameters for automatic quantification
autorun_data = list(
dataset = imported_data$dataset,
ppm = imported_data$ppm,
buck_step = imported_data$buck_step,
profile_folder_path = imported_data$profile_folder_path,
signals_names = imported_data$signals_names,
signals_codes = imported_data$signals_codes,
Experiments = imported_data$Experiments,
export_path = imported_data$export_path,
freq = imported_data$freq,
Metadata=imported_data$Metadata
)
debug(fittingloop)
finaloutput = autorun(autorun_data, finaloutput)
if (is.numeric(other_fit_parameters$fitting_maxiter)) {
fitting_maxiter = other_fit_parameters$fitting_maxiter
} else {
if (dim(FeaturesMatrix)[1] > 8 |
any(FeaturesMatrix[, 4] - FeaturesMatrix[, 3] > 0.01)) {
fitting_maxiter = 10
} else if ((dim(FeaturesMatrix)[1] > 5 &&
dim(FeaturesMatrix)[1] < 9)) {
fitting_maxiter = 7
} else {
fitting_maxiter = 4
}
}
lol
s0
peaks[aa]
lb
ub
round(s0,3)
Ydata
Xdata
multiplicities
roof_effect
other_fit_parameters$freq
imported_data
imported_data$freq
import_profile[11, 2]
import_profile
runApp()
runApp()
runApp()
library(readr)
nn <- read_csv("~/portuguese spectra/nn.csv",
col_names = FALSE)
View(nn)
library(readr)
real_portuguese_metadata <- read_csv("~/real_portuguese_metadata.csv",
col_names = FALSE)
View(real_portuguese_metadata)
library(R.matlab)
library(readr)
pqndataportuguesedata <- read_csv("C:/Bruker/TopSpin3.2/data/MTBLS1/data analysis/pqndataportuguesedata.csv",
col_names = FALSE)
View(pqndataportuguesedata)
