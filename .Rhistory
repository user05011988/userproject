e=e[e>0&e<857]
f=b[-e,]
rm(b)
g=apply(f,2,sd)/colMeans(f)
h=f[,g>1]
rm(f)
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(194,'notsp'),replicate(194,'tsp'),replicate(194,'notsp'),replicate(194,'tsp')))
#
# aov_results=matrix(NA,4,dim(dataframe3)[2]-1)
# colnames(aov_results)=colnames(e)
# for (i in 1:dim(aov_results)[2]) {
#   a=(aov(dataframe3[,i]~e[,i]*dataframe3$intervention))
#   d=boxcox(a, lambda = seq(-4, 4, 0.01),plotit=F)
#   aov_results[1:3,i]=summary(aov(dataframe3[,i]^(d$x[which.max(d$y)])~e[,i]*dataframe3$intervention))[[1]][1:3,5]
#   a=(aov(dataframe3[,i]~dataframe3$intervention))
#   d=boxcox(a, lambda = seq(-4, 4, 0.01),plotit=F)
#   aov_results[4,i]=summary(aov(dataframe3[,i]^(d$x[which.max(d$y)])~dataframe3$intervention))[[1]][1,5]
# }
library(mlbench)
library(caret)
# load the data
# calculate correlation matrix
correlationMatrix <- cor(dataframe3[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe3[,fer],center=T,scale=T)
dim(X)
ir.pca <- prcomp(X,
center = TRUE,
scale = TRUE)
plot(ir.pca, type = "l")
summary(ir.pca)
# library(devtools)
# install_github("ggbiplot", "vqv")
library(ggbiplot)
yyyy=factor(c(replicate(194,'notsp19'),replicate(194,'tsp19'),replicate(194,'notsp20'),replicate(194,'tsp20')))
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = Xwitscale$intervention, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
yyyy=factor(c(replicate(194,'notsp19'),replicate(194,'tsp19'),replicate(194,'notsp20'),replicate(194,'tsp20')))
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = yyyy, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
result <- splsda(X, yyyy, ncomp = 3) # where keepX is the
plotIndiv(result, comp = 1:2,
group=Xwitscale$intervention,ellipse=T,centroid=T,ind.names=T,add.legend=T)
library(mixOmics)
result <- splsda(X, yyyy, ncomp = 3) # where keepX is the
plotIndiv(result, comp = 1:2,
group=Xwitscale$intervention,ellipse=T,centroid=T,ind.names=T,add.legend=T)
result <- splsda(X, yyyy, ncomp = 3) # where keepX is the
plotIndiv(result, comp = 1:2,
group=yyyy,ellipse=T,centroid=T,ind.names=T,add.legend=T)
options(expressions=5000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
options(expressions=6000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
options(expressions=7000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
options(expressions=8000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
dataframe4=dataframe3[1:388,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe3[,fer],center=T,scale=T)
dim(X)
dataframe4=dataframe3[1:388,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe4[,fer],center=T,scale=T)
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[:388])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
# options(expressions=8000)
plotIndiv(res.2level,ind.names = T, legend=T)
Y = data.frame(stimul = dataframe3$intervention[,1:388])
Y = data.frame(stimul = dataframe3$intervention[1:388])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
# options(expressions=8000)
plotIndiv(res.2level,ind.names = T, legend=T)
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20, 20)
)
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1, ...)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
library(mixOmics)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
install.packages("spls")
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
library(mixOmics)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
library(spls)
install.packages("pls")
library(mixOmics)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
auroc(res.2level, plot = TRUE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
data(liver.toxicity)
X <- as.matrix(liver.toxicity$gene)
# Y will be transformed as a factor in the function,
# but we set it as a factor to set up the colors.
Y <- as.factor(liver.toxicity$treatment[, 4])
splsda.liver <- splsda(X, Y, ncomp = 2, keepX = c(20, 20))
auc.splsda.liver = auroc(splsda.liver, ncomp = 1)
X <- scale(dataframe4[,fer],center=T,scale=T)
# Y <- vac18$stimulation
# sample indicates the repeated measurements
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[1:388])
save.image("~/dummy.RData")
dataframe4=dataframe3[389:776,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe4[,fer],center=T,scale=T)
# Y <- vac18$stimulation
# sample indicates the repeated measurements
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[1:388])
save.image("~/dummy2.RData")
dataframe4=dataframe3[,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe4[,fer],center=T,scale=T)
preX <- scale(dataframe4[,fer],center=T,scale=T)
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[1:388])
dim(preX)
save.image("~/dummy.RData")
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData1821.txt')
library(rio)
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData1821.txt')
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
object.size(a)
b=a$AlignedData
rm(a)
axisscale=seq(12,-1,-0.001)
colnames(b)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
b=b[,der]
j=apply(b,2,median)
c=apply(b,1,function(x) cor(x,j,method='spearman'))
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
a=a[,der]
j=apply(b,2,median)
c=apply(a,1,function(x) cor(x,j,method='spearman'))
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
a=a[,der]
j=apply(b,2,median)
c=apply(a,1,function(x) cor(x,j,method='spearman'))
j=apply(a,2,median)
c=apply(a,1,function(x) cor(x,j,method='spearman'))
plot(sort((c)))
plot(sort(c))
j=apply(a,2,function(x)median(x,na.rm=T))
c=apply(a,1,function(x) cor(x,j,method='spearman'))
# c=cor(t(b),use='pairwise.complete.obs',method = 'spearman')
plot(sort(c))
d=which(c< 0.4  )
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<dim(e)[1]+1]
f=a[-e,]
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<(dim(e)[1]+1)]
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<(dim(a)[1]+1)]
f=a[-e,]
rm(a)
g=apply(f,2,sd)/colMeans(f)
h=f[,g>1]
rm(f)
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
a=a[,der]
j=apply(a,2,function(x)median(x,na.rm=T))
c=apply(a,1,function(x) cor(x,j,method='spearman'))
# c=cor(t(b),use='pairwise.complete.obs',method = 'spearman')
plot(sort(c))
d=which(c< 0.4  )
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<(dim(a)[1]+1)]
f=a[-e,]
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
h=f[,g>1]
plot(sort(g))
plot(sort(g[1000:4000]))
plot(sort(g[1500:3500]))
plot(sort(g[2000:300]))
plot(sort(g[2000:3000]))
tt=sort(g)
tt[500]
tt[1000]
tt[1500]
tt[2000]
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
h=f[,g>2]
rm(f)
rm(a)
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(194,'notsp'),replicate(194,'tsp'),replicate(194,'notsp'),replicate(194,'tsp')),replicate(194,'notsp'),replicate(194,'tsp'),replicate(194,'notsp'),replicate(194,'tsp')))
1288/8
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(+161,'notsp'),replicate(+161,'tsp'),replicate(+161,'notsp'),replicate(+161,'tsp')),replicate(+161,'notsp'),replicate(+161,'tsp'),replicate(+161,'notsp'),replicate(+161,'tsp')))
dataframe3$intervention=factor(c(replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp')))
library(mlbench)
library(caret)
# load the data
# calculate correlation matrix
dataframe4=dataframe3[,]
correlationMatrix <- cor(dataframe4[,1:dim(dataframe4)[2]])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:dim(dataframe4)[2],highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
correlationMatrix <- cor(dataframe4[,-(dim(dataframe4)[2]])
correlationMatrix <- cor(dataframe4[,-(dim(dataframe4)[2])])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:dim(dataframe4)[2],highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
View(dataframe4)
lele=is.na(dataframe4)
View(lele)
lele=all(is.na(dataframe4))
lele=apply(dataframe4,1,all(is.na(x))
)
lele=apply(dataframe4,1,all(is.na())
)
lele=apply(dataframe4,1,function(x)all(is.na(x)))
which(lele)=T
which(lele==T)
lele=apply(dataframe4,2,function(x)all(is.na(x)))
which(lele==T)
lele=is.na(dataframe4)
which(lele==T)
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
View(a)
e=c(e,13,13+214,13+214*2,13+214*3,13+214*4,13+214*5,13+214*6,13+214*7)
f=a[-e,]
rm(a)
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
h=f[,g>2]
rm(f)
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp')))
dataframe3$intervention=factor(c(replicate(160,'notsp'),replicate(160,'tsp'),replicate(160,'notsp'),replicate(160,'tsp'),replicate(160,'notsp'),replicate(160,'tsp'),replicate(160,'notsp'),replicate(160,'tsp')))
library(mlbench)
library(caret)
# load the data
# calculate correlation matrix
dataframe4=dataframe3[,]
correlationMatrix <- cor(dataframe4[,-(dim(dataframe4)[2])])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
fer=setdiff(1:dim(dataframe4)[2],highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
tail(fer)
fer=setdiff(1:(dim(dataframe4)[2]-1),highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
dim(preX)
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:160*2])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20, 20))
X=preX[1:160*2,]
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20, 20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,
multilevel = design, plot = TRUE)
X=preX[1:160*2,]
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:160*2])
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20, 20))
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
library(mixOmics)
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
Y = data.frame(stimul = dataframe3$intervention[1:(160*2)])
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
X=preX[(1:160*2),]
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
dim(x)
dim(X)
X=preX[(1:160*2),]
X=preX[1:(160*2),]
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:(160*2)])
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,
multilevel = design, plot = TRUE)
auroc(res.2level,multilevel = design, plot = TRUE)
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20,20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,multilevel = design, plot = TRUE)
res.2level <- plsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20,20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,multilevel = design, plot = TRUE)
po=auroc(res.2level,multilevel = design, plot = TRUE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
detach("package:caret", unload=TRUE)
detach("package:mlbench", unload=TRUE)
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:(160*2)])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20,20))
plotIndiv(res.2level,ind.names = T, legend=T)
po=auroc(res.2level,multilevel = design, plot = TRUE)
library(mixOmics)
po=auroc(res.2level,multilevel = design, plot = TRUE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
?auroc
save.image("~/dummy.RData")
library(shiny); print(source('Dolphin/R/prova_def.R')$value)
intensity <- read.csv("C:/Users/user/Downloads/results/intensity.csv", header=FALSE)
View(intensity)
ind=grep('_s',colnames(intensity))[order(colnames(intensity)[grep('_',colnames(intensity))])]
ind=grep('_',colnames(intensity))[order(colnames(intensity)[grep('_',colnames(intensity))])]
ROI_data <- read.csv("~/r_dolphin - csv/ROI_patterns_plasma/Profiles.csv")
View(ROI_data)
duplicated(ROI_data)
duplicated(ROI_data[,4])
ROI_data[6,C(4,7)]=C('Valine',7)
ROI_data[6,6]='Valine'
ROI_data[6,4]='Valine'
ROI_data[6,7]=3
duplicated(ROI_data[,4])
sss=which(duplicated(ROI_data[,4])==F)
ROI_data[,4] %in% ROI_data[1,4]
df=which(ROI_data[,4] %in% ROI_data[1,4]==T)
sa=colMeans(intensity[,df],na.rm+T)
sa=colMeans(intensity[,df],na.rm=T)
View(intensity)
sa=colMeans(intensity[-1,df],na.rm=T)
View(intensity)
intensity=intensity[-1,-1]
View(intensity)
intensity <- read.csv("~/r_dolphin - csv/results_19_TSP_improved/intensity.csv", row.names=1, stringsAsFactors=FALSE)
View(intensity)
intensity[,6]=runif(30)
View(intensity)
sa=colMeans(intensity[,df],na.rm=T)
sort(colMeans(intensity[,df],na.rm=T),index.return=T)$ix[1:2]
df[sort(colMeans(intensity[,df],na.rm=T),index.return=T)$ix[1:2]]
?sort
`finaloutput$width` <- read.csv("~/r_dolphin - csv/results_19_TSP_improved/width.csv", row.names=1, stringsAsFactors=FALSE)
View(`finaloutput$width`)
fo2=matrix(0,dim(finaloutput$width)[1],dim(finaloutput$width)[2])
flo2=array(0,dim=c(dim(finaloutput$width)[1],dim(finaloutput$width)[2],3))
medianwidth=apply(finaloutput$width,2,median)
ind=which(apply(finaloutput$width,2, function(x) all(is.na(x)))==F)
width <- read.csv("~/r_dolphin - csv/results_19_TSP_improved/width.csv", row.names=1, stringsAsFactors=FALSE)
View(width)
finaloutput=list(width=width)
fo2=matrix(0,dim(finaloutput$width)[1],dim(finaloutput$width)[2])
flo2=array(0,dim=c(dim(finaloutput$width)[1],dim(finaloutput$width)[2],3))
medianwidth=apply(finaloutput$width,2,median)
ind=which(apply(finaloutput$width,2, function(x) all(is.na(x)))==F)
ind
for (ii in seq_along(ind)) {
print(ii)
nanana=tryCatch({lmrob(as.numeric(finaloutput$width[ii,]) ~ medianwidth,control = lmrob.control(maxit.scale=5000))},error= function(e) {lm(as.numeric(finaloutput$width[ii,]) ~ medianwidth)})
tro=predict(nanana, interval='prediction')
flo2[ii,,]=tro
fo2[ii,which(finaloutput$width[ii,]<tro[,2]|finaloutput$width[ii,]>tro[,3])]=1
}
tro
flo2
medianwidth
ind=which(apply(finaloutput$width,2, function(x) all(is.na(x)))==F)
fo2=matrix(0,dim(finaloutput$width)[1],length(ind))
flo2=array(0,dim=c(dim(finaloutput$width)[1],length(ind),3))
medianwidth=apply(finaloutput$width,2,median)[ind]
for (ii in seq_along(ind)) {
print(ii)
nanana=tryCatch({lmrob(as.numeric(finaloutput$width[ii,]) ~ medianwidth,control = lmrob.control(maxit.scale=5000))},error= function(e) {lm(as.numeric(finaloutput$width[ii,]) ~ medianwidth)})
tro=predict(nanana, interval='prediction')
flo2[ii,,]=tro
fo2[ii,which(finaloutput$width[ii,]<tro[,2]|finaloutput$width[ii,]>tro[,3])]=1
}
medianwidth
as.numeric(finaloutput$width[ii,])
for (ii in seq_along(ind)) {
print(ii)
nanana=tryCatch({lmrob(as.numeric(finaloutput$width[ii,ind]) ~ medianwidth,control = lmrob.control(maxit.scale=5000))},error= function(e) {lm(as.numeric(finaloutput$width[ii,ind]) ~ medianwidth)})
tro=predict(nanana, interval='prediction')
flo2[ii,,]=tro
fo2[ii,which(finaloutput$width[ii,ind]<tro[,2]|finaloutput$width[ii,ind]>tro[,3])]=1
}
flo2
tro
colnames(fo2)=colnames(finaloutput$shift)[ind]
rownames(fo2)=rownames(finaloutput$shift)[ind]
colnames(fo2)=colnames(finaloutput$shift)[ind]
rownames(fo2)=rownames(finaloutput$shift)[ind]
