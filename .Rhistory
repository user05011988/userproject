# initial_fit_parameters=as.data.frame(apply(initial_fit_parameters,2,as.numeric))
# initial_fit_parameters = initial_fit_parameters[complete.cases(initial_fit_parameters),]
colnames(initial_fit_parameters) = c(
"positions",
"widths",
"quantification_or_not",
"multiplicities",
"Jcoupling",
"roof_effect",
"shift_tolerance"
)
#Ydata is scaled to improve the quality of the fitting
scaledYdata = as.vector(Ydata / (max(Ydata)))
#Other parameters necessary for the fitting independent of the type of signal
other_fit_parameters$clean_fit = clean_fit
#Adaptation of the info of the parameters into a single matrix and preparation (if necessary) of the background signals that will conform the baseline
FeaturesMatrix = fitting_prep(preXdata,
scaledYdata,
initial_fit_parameters,
other_fit_parameters)
#Calculation of the parameters that will achieve the best fitting
signals_parameters = fittingloop(FeaturesMatrix,
preXdata,
scaledYdata,
other_fit_parameters)
pre_import_excel_profile[signals_to_quantify,6]=signals_parameters[3,signals_to_quantify]*autorun_data$freq
}
dd=autorun_data$dataset[,ROI_buckets]/apply(autorun_data$dataset[,ROI_buckets],1,median)
bc=apcluster(negDistMat(r=2),dd,q=0.5)
bd=list()
be=c()
j=1
for (i in 1:length(bc@clusters)) {
if (length(bc@clusters[[i]])>4) {
bd[[j]]=bc@clusters[[i]]
j=j+1
} else {
be=c(be,bc@clusters[[i]])
}
}
bd[[j]]=be
# rm(bd)
# bd=list()
# bd[[1]] =1:dim(autorun_data$dataset)[1]
#
tot_import_excel_profile=list()
tot_Xdata=list()
if (other_fit_parameters$automatic_roi_edition=='Y') {
for (i in 1:length(bd)) {
dummy = automatic_roi_edition(autorun_data$dataset[bd[[i]],,drop=F],
pre_import_excel_profile,
preXdata,
other_fit_parameters,ROI_limits,autorun_data$ppm)
tot_import_excel_profile[[i]]=dummy$import_excel_profile
# ROI_limits=dummy$ROI_limits
# if (ROI_limits[1] < ROI_limits[2])
#   rev(ROI_limits)
# other_fit_parameters$ROI_buckets = which(autorun_data$ppm < ROI_limits[1] &
#                                            autorun_data$ppm >
#                                            ROI_limits[2])
# Xdata[[i]] = autorun_data$ppm[other_fit_parameters$ROI_buckets]
tot_Xdata[[i]] = autorun_data$ppm[which(autorun_data$ppm <= dummy$ROI_limits[1] &autorun_data$ppm >= dummy$ROI_limits[2])]
}
tot2_import_excel_profile=as.data.frame(matrix(NA,dim(pre_import_excel_profile)[1]*dim(autorun_data$dataset)[1],dim(pre_import_excel_profile)[2]),stringsAsFactors = F)
tot2_Xdata=matrix(NA,dim(autorun_data$dataset)[1],length(preXdata))
for (kkk in 1:length(bd)) {
for (kkl in 1:length(bd[[kkk]])) {
tot2_import_excel_profile[(dim(pre_import_excel_profile)[1]*bd[[kkk]][kkl]-dim(pre_import_excel_profile)[1]+1):(dim(pre_import_excel_profile)[1]*bd[[kkk]][kkl]),]=tot_import_excel_profile[[kkk]]
tot2_Xdata[bd[[kkk]][kkl],]=tot_Xdata[[kkk]]
}}
} else {
tot2_import_excel_profile=do.call(rbind, replicate(dim(autorun_data$dataset)[1], pre_import_excel_profile, simplify=FALSE))
tot2_Xdata=matrix(rep(preXdata,each=dim(autorun_data$dataset)[1]),nrow=dim(autorun_data$dataset)[1])
}
# bf=apcluster(negDistMat(r=2),dd[be,])
fitting_type = as.character(pre_import_excel_profile[1, 3])
signals_to_quantify = which(pre_import_excel_profile[, 7] == 1)
signals_codes = replicate(length(signals_to_quantify), NA)
signals_names = replicate(length(signals_to_quantify), NA)
j = 1
for (i in signals_to_quantify) {
k = which(autorun_data$signals_names == pre_import_excel_profile[i,
4])
signals_codes[j] = autorun_data$signals_codes[k]
signals_names[j] = as.character(autorun_data$signals_names[k])
j = j + 1
}
#Quantification for every experiment
spectrum_index=1
print(spectrum_index)
Xdata=tot2_Xdata[spectrum_index,]
import_excel_profile=tot2_import_excel_profile[(dim(pre_import_excel_profile)[1]*spectrum_index-dim(pre_import_excel_profile)[1]+1):(dim(pre_import_excel_profile)[1]*spectrum_index),]
import_excel_profile_1=import_excel_profile
import_excel_profile=rbind(import_excel_profile_1,import_excel_profile_2)
rownames(plot_data) = c("signals_sum",
"baseline_sum",
"fitted_sum",
as.character(import_excel_profile[,4]))
other_fit_parameters$signals_to_quantify=signals_to_quantify
Ydata=scaledYdata
plotgenerator(
results_to_save,
plot_data,
Xdata,
Ydata,
fitted_signals,
other_fit_parameters,
signals_names,
experiment_name,
is_roi_testing,
plot_path
)
Ydata
scaledYdata
Xdata=c(Xdata_1,Xdata_2)
scaledYdata=c(scaledYdata_1,scaledYdata_2)
FeaturesMatrix=c(FeaturesMatrix_1,FeaturesMatrix_2)
Xdata=c(Xdata_1,Xdata_2)
scaledYdata=c(scaledYdata_1,scaledYdata_2)
FeaturesMatrix=rbind(FeaturesMatrix_1,FeaturesMatrix_2)
Ydata=scaledYdata
plotgenerator(
results_to_save,
plot_data,
Xdata,
Ydata,
fitted_signals,
other_fit_parameters,
signals_names,
experiment_name,
is_roi_testing,
plot_path
)
fitted_signals
plot(fitted_signals[1,])
plot(fitted_signals[1,])
View(FeaturesMatrix)
initial_fit_parameters
View(FeaturesMatrix)
signals_parameters
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
singals_to_quantify=c(1,2,6,7)
fitted_signals = definitivefitting(signals_parameters,
Xdata)
#Generation of output data about the fitting and of the necessary variables for the generation ofa figure
output_data = output_generator(
signals_to_quantify,
fitted_signals,
scaledYdata,
Xdata,
signals_parameters
)
fitted_signals
output_data$intensity=signals_parameters[1, signals_to_quantify] * max(Ydata)
output_data$width=signals_parameters[3, signals_to_quantify]
#Generation of the dataframe with the final output variables
results_to_save = data.frame(
shift = output_data$shift,
Area = output_data$Area * max(Ydata),
signal_area_ratio = output_data$signal_area_ratio,
fitting_error = output_data$fitting_error,
intensity = output_data$intensity,
width = output_data$width
)
#Adaptation of the quantification to de-scaled Ydata
# results_to_save$Area = results_to_save$Area * max(Ydata)
#Generation of the figure when the conditions specified in the Parameters file are accomplished
plot_data = rbind(
output_data$signals_sum,
output_data$baseline_sum,
output_data$fitted_sum,
output_data$signals
)
rownames(plot_data) = c("signals_sum",
"baseline_sum",
"fitted_sum",
as.character(import_excel_profile[,4]))
other_fit_parameters$signals_to_quantify=signals_to_quantify
Ydata=scaledYdata
plotgenerator(
results_to_save,
plot_data,
Xdata,
Ydata,
fitted_signals,
other_fit_parameters,
signals_names,
experiment_name,
is_roi_testing,
plot_path
)
plot(fitted_signals[6,])
save.image("~/userproject/envidummy.RData")
freddy=cbind(rep(1,7),rep(NA,7))
freddy[1,]=c(0.43,6)
freddy
assign(freddy,freddy,envir=.GlobalEnv)
?assign
assign('freddy',freddy,envir=.GlobalEnv)
s=1
is.na(freddy[s,2])==F
source('packages_sources.R')
packages_sources()
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
warnings()
signals_parameters
signals_parameters[1,1]/signals_parameters[1,6]
FeaturesMatrix
if (is.numeric(other_fit_parameters$fitting_maxiter)) {
fitting_maxiter=other_fit_parameters$fitting_maxiter
} else {
if (dim(FeaturesMatrix)[1] > 8 |
any(FeaturesMatrix[, 4] - FeaturesMatrix[, 3] > 0.01)) {
fitting_maxiter = 10
} else if ((dim(FeaturesMatrix)[1] > 5 &&
dim(FeaturesMatrix)[1] < 9) ) {
fitting_maxiter = 7
} else {
fitting_maxiter = 4
}
}
#Necessary information to incorporate additional singals if necessary
signals_to_quantify = which(FeaturesMatrix[, 11] != 0)
range_ind = round(other_fit_parameters$additional_signal_ppm_distance / other_fit_parameters$buck_step)
signals_to_add = other_fit_parameters$signals_to_add
#Variables to initialize the loop
# try_error=000
error2 = 3000
iterrep = 0
fitting_maxiterrep = other_fit_parameters$fitting_maxiterrep
#Function where to find a minimum
residFun <-
function(p, observed, xx)
observed - fitting_optimization(p, xx)
# Loop to control if additional signals are incorporated, until a maximum of iterations specified bt fitting_maxiterrep.
# If at the last fitting the improvement was lesser than 25% respective to the previous fitting,
# iterrep becomes equal to fitting_maxiterrep and the loop is stooped
while (iterrep < fitting_maxiterrep) {
# print(iterrep)
iter = 0
errorprov = 3000
error1 = 3000
worsterror = 0
bounds=list(ub=matrix(0,dim(FeaturesMatrix)[1],(dim(FeaturesMatrix)[2]/2)-2),lb=matrix(0,dim(FeaturesMatrix)[1],(dim(FeaturesMatrix)[2]/2)-2))
bounds$lb=t(FeaturesMatrix[,seq(1,9,2),drop=F])
bounds$ub=t(FeaturesMatrix[,seq(2,10,2),drop=F])
lb = rbind(bounds$lb, t(FeaturesMatrix[, 11:12, drop = F]))
ub = rbind(bounds$ub, t(FeaturesMatrix[, 11:12, drop = F]))
s0 = lb + (ub - lb) * matrix(runif(dim(lb)[1] * dim(lb)[2]), dim(lb)[1], dim(lb)[2])
}
s0 = lb + (ub - lb) * matrix(runif(dim(lb)[1] * dim(lb)[2]), dim(lb)[1], dim(lb)[2])
#
# if (exists('nls.out')) {
#   s0=paramprov+ (ub-lb)*0.2*matrix(runif(dim(lb)[1] * dim(lb)[2],min=-1,max=1), dim(lb)[1], dim(lb)[2])
#   s0[(s0-lb)<0]=lb[(s0-lb)<0]
#   s0[(ub-s0)<0]=ub[(ub-s0)<0]
#
#   }
#
nls.out <-
nls.lm(
par = as.vector(s0),
fn = residFun,
observed = Ydata,
xx = Xdata,
lower = as.vector(lb),
upper = as.vector(ub),
control = nls.lm.control(factor = other_fit_parameters$factor,  maxiter=other_fit_parameters$nls_lm_maxiter, ftol=other_fit_parameters$ftol, ptol=other_fit_parameters$ptol)
)
parS=as.vector(s0)
xx=Xdata
i = as.numeric(parS[seq(1, length(parS) - 6, 7)])
p = as.numeric(parS[seq(2, length(parS) - 5, 7)])
w = as.numeric(parS[seq(3, length(parS) - 4, 7)])
g = as.numeric(parS[seq(4, length(parS) - 3, 7)])
j = as.numeric(parS[seq(5, length(parS) - 2, 7)])
multiplicities = as.numeric(parS[seq(6, length(parS) - 1, 7)])
roof_effect = as.numeric(parS[seq(7, length(parS) - 0, 7)])
NumSignals = length(parS) / 7
Xdata = xx
i
s=1
if (is.na(freddy[s,2])==F) i[s]=freddy[s,1]*i[freddy[s,2]]
s
i[s]
i[2]
s=2
is.na(freddy[s,2])==F
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
freddy[s,
1]
s=1
freddy[s,1]
i[freddy[s,2]]
for (s in 1:NumSignals) {
if (is.na(freddy[s,2])==F) i[s]=freddy[s,1]*i[freddy[s,2]]
if (roof_effect[s] > 0) {
# ep! canvi taulada!
if (multiplicities[s] == 1) {
signal = peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 2) {
signal = peakpvoigt(c(i[s] / (1 - roof_effect[s]), p[s] - j[s], w[s], g[s]), Xdata) +
peakpvoigt(c(i[s], p[s] + j[s], w[s], g[s]), Xdata) #ep! canvi taulada!
F = F + signal
} else if (multiplicities[s] == 3) {
y=1/(2 + roof_effect[s])
x= 1-y
signal = peakpvoigt(c(i[s] * x, p[s] - j[s], w[s], g[s]), Xdata) + peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata) +
peakpvoigt(c(i[s] *y, p[s] + j[s], w[s], g[s]), Xdata) #ep! canvi taulada!
F = F + signal
} else if (multiplicities[s] == 4) {
# signal = peakpvoigt(c(i[s]/3, p[s]-3*j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s], p[s]-j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s]*(1-abs(roof_effect[s])), p[s]+j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s]/3*(1-abs(roof_effect[s])), p[s]+3*j[s], w[s], g[s]),Xdata)
# F = F+signal
}
} else if (roof_effect[s] == 0) {
if (multiplicities[s] == 0) {
signal = peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 1) {
signal = peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 2) {
signal = peakpvoigt(c(i[s], p[s] - j[s], w[s], g[s]), Xdata) + peakpvoigt(c(i[s], p[s] +
j[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 3) {
signal = peakpvoigt(c(i[s] / 2, p[s] - j[s], w[s], g[s]), Xdata) + peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata) +
peakpvoigt(c(i[s] / 2, p[s] + j[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 4) {
# signal = peakpvoigt(c(i[s]/3, p[s]-3*j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s], p[s]-j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s], p[s]+j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s]/3, p[s]+3*j[s], w[s], g[s]),Xdata)
# F = F+signal
}
} else if (roof_effect[s] < 0) {
if (multiplicities[s] == 1) {
signal = peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 2) {
signal = peakpvoigt(c(i[s], p[s] - j[s], w[s], g[s]), Xdata) + peakpvoigt(c(i[s] *
(1 - roof_effect[s]), p[s] + j[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 3) {
y=1/(1 + roof_effect[s])
x= 1-y
signal = peakpvoigt(c(i[s]*x, p[s] - j[s], w[s], g[s]), Xdata) + peakpvoigt(c(i[s], p[s], w[s], g[s]), Xdata) +
peakpvoigt(c(i[s] *y, p[s] + j[s], w[s], g[s]), Xdata)
F = F + signal
} else if (multiplicities[s] == 4) {
# signal = peakpvoigt(c(i[s]/3*(1-roof_effect[s]), p[s]-3*j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s]*(1-roof_effect[s]), p[s]-j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s], p[s]+j[s], w[s], g[s]),Xdata)+peakpvoigt(c(i[s]/3, p[s]+3*j[s], w[s], g[s]),Xdata)
# F = F+signal
}
}
}
if (is.na(freddy[s,2])==F) i[s]=freddy[s,1]*i[freddy[s,2]]
(is.na(freddy[s,2])==F)
is.na(freddy[s,2]
)
if (!is.na(freddy[s,2])) i[s]=freddy[s,1]*i[freddy[s,2]]
source('packages_sources.R')
packages_sources()
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
1.614/3.681
signals_parameters
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
fitted_signals = definitivefitting(signals_parameters,
Xdata)
plot(fitted_signals[1,])
1/0.43
freddy=cbind(rep(1,7),rep(NA,7))
freddy[6,]=c(2.32,1)
assign('freddy',freddy,envir=.GlobalEnv)
#Calculation of the parameters that will achieve the best fitting
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
fitted_signals = definitivefitting(signals_parameters,
Xdata)
save.image("~/userproject/envidummy.RData")
assign('freddy',freddy,envir=.GlobalEnv)
freddy[1,]=c(0.43,6)
freddy=cbind(rep(1,7),rep(NA,7))
source('packages_sources.R')
packages_sources()
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
signals_parameters
fitted_signals = definitivefitting(signals_parameters,
Xdata)
savehistory("~/userproject/envidummy.RData")
savehistory("~/userproject/envidummy.RData")
savehistory("~/userproject/envidummy2.Rhistory")
savehistory("~/userproject/envidummy2.RData")
save("~/userproject/envidummy2.RData")
save.image("~/userproject/envidummy.RData")
assign('freddy',freddy,envir=.GlobalEnv)
freddy[1,]=c(0.61,6)
freddy=cbind(rep(1,7),rep(NA,7))
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
save.image("~/userproject/envidummy.RData")
freddy=cbind(rep(1,7),rep(NA,7))
freddy[1,]=c(0.43,6)
assign('freddy',freddy,envir=.GlobalEnv)
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
signals_parameters
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
signals_parameters
save.image("~/userproject/envidummy.RData")
freddy=cbind(rep(1,7),rep(NA,7))
freddy[1,]=c(0.61,6)
assign('freddy',freddy,envir=.GlobalEnv)
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
save.image("~/userproject/envidummy.RData")
freddy=cbind(rep(1,7),rep(NA,7))
freddy[1,]=c(0.61,6)
assign('freddy',freddy,envir=.GlobalEnv)
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
signals_parameters
1/0.61
freddy=cbind(rep(1,7),rep(NA,7))
freddy[6,]=c(1.64,1)
assign('freddy',freddy,envir=.GlobalEnv)
save.image("~/userproject/envidummy.RData")
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
signals_parameters
2.25/3.24
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
signals_parameters
signals_parameters = fittingloop(FeaturesMatrix,
Xdata,
scaledYdata,
other_fit_parameters)
#Fitting of the signals
fitted_signals = definitivefitting(signals_parameters,
Xdata)
signals_parameters
?require
