# c2[is.na(c2)]=0
# d2=cbind(b2[,-1],c2[,-1])
data=readMat('C:/Bruker/TopSpin3.2/data/MTBLS1/data analysis/pqndata.mat')
e2=t(data$pqndata[49:132,])
e2[is.na(e2)]=0
g=t(import('C:/Users/user/Dropbox/binning/binning_dataset.csv'))
g=cbind(as.numeric(rownames(g)),g)
g2=matrix(0,43334,dim(g)[2])
g2[.1]=seq(12,-1,by=-0.0003)
for (i in 2:dim(g)[2]) g2[,i]=approx(g[,1],g[,i],seq(12,-1,by=-0.0003))$y
g2[is.na(g2)]=0
h=t(import('C:/Users/user/Dropbox/metabolome/binning_dataset.csv'))
h=cbind(as.numeric(rownames(h)),h)
h2=matrix(0,43334,dim(h)[2])
h2[.1]=seq(12,-1,by=-0.0003)
for (i in 2:dim(h)[2]) h2[,i]=approx(h[,1],h[,i],seq(12,-1,by=-0.0003))$y
h2[is.na(h2)]=0
# f2=cbind(d2[,c(1:15,34:63)],t(data$pqndata[49:132,]),g2[,-1],h2[,-1])
f2=cbind(e2,g2[,-1],h2[,-1])
writeMat('C:/Bruker/TopSpin3.2/data/MTBLS1/data analysis/combineddata.mat',before=f2)
View(f2)
library(R.matlab)
a=readMat('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData1920.mat')
b=a$AlignedData
rm(a)
axisscale=seq(12,-1,-0.001)
colnames(b)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
b=b[,der]
j=apply(b,2,median)
c=apply(b,1,function(x) cor(x,j,method='spearman'))
# c=cor(t(b),use='pairwise.complete.obs',method = 'spearman')
# plot(sort(rowSums(c)))
d=which(c< 0.4  )
e=unique(c(d-214,d-428,d-642,d+214,d+428,d+642,d))
e=e[e>0&e<857]
f=b[-e,]
rm(b)
g=apply(f,2,sd)/colMeans(f)
h=f[,g>1]
rm(f)
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(194,'notsp'),replicate(194,'tsp'),replicate(194,'notsp'),replicate(194,'tsp')))
#
# aov_results=matrix(NA,4,dim(dataframe3)[2]-1)
# colnames(aov_results)=colnames(e)
# for (i in 1:dim(aov_results)[2]) {
#   a=(aov(dataframe3[,i]~e[,i]*dataframe3$intervention))
#   d=boxcox(a, lambda = seq(-4, 4, 0.01),plotit=F)
#   aov_results[1:3,i]=summary(aov(dataframe3[,i]^(d$x[which.max(d$y)])~e[,i]*dataframe3$intervention))[[1]][1:3,5]
#   a=(aov(dataframe3[,i]~dataframe3$intervention))
#   d=boxcox(a, lambda = seq(-4, 4, 0.01),plotit=F)
#   aov_results[4,i]=summary(aov(dataframe3[,i]^(d$x[which.max(d$y)])~dataframe3$intervention))[[1]][1,5]
# }
library(mlbench)
library(caret)
# load the data
# calculate correlation matrix
correlationMatrix <- cor(dataframe3[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe3[,fer],center=T,scale=T)
dim(X)
ir.pca <- prcomp(X,
center = TRUE,
scale = TRUE)
plot(ir.pca, type = "l")
summary(ir.pca)
# library(devtools)
# install_github("ggbiplot", "vqv")
library(ggbiplot)
yyyy=factor(c(replicate(194,'notsp19'),replicate(194,'tsp19'),replicate(194,'notsp20'),replicate(194,'tsp20')))
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = Xwitscale$intervention, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
yyyy=factor(c(replicate(194,'notsp19'),replicate(194,'tsp19'),replicate(194,'notsp20'),replicate(194,'tsp20')))
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1,
groups = yyyy, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
result <- splsda(X, yyyy, ncomp = 3) # where keepX is the
plotIndiv(result, comp = 1:2,
group=Xwitscale$intervention,ellipse=T,centroid=T,ind.names=T,add.legend=T)
library(mixOmics)
result <- splsda(X, yyyy, ncomp = 3) # where keepX is the
plotIndiv(result, comp = 1:2,
group=Xwitscale$intervention,ellipse=T,centroid=T,ind.names=T,add.legend=T)
result <- splsda(X, yyyy, ncomp = 3) # where keepX is the
plotIndiv(result, comp = 1:2,
group=yyyy,ellipse=T,centroid=T,ind.names=T,add.legend=T)
options(expressions=5000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
options(expressions=6000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
options(expressions=7000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
options(expressions=8000)
design <- data.frame(sample = factor(c(1:194,1:194,1:194,1:194)))
Y = data.frame(sample = factor(c(1:194,1:194,1:194,1:194)),stimul = dataframe3$intervention)
# multilevel sPLS-DA model
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
plotIndiv(res.2level, legend=T)
dataframe4=dataframe3[1:388,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe3[,fer],center=T,scale=T)
dim(X)
dataframe4=dataframe3[1:388,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe4[,fer],center=T,scale=T)
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[:388])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
# options(expressions=8000)
plotIndiv(res.2level,ind.names = T, legend=T)
Y = data.frame(stimul = dataframe3$intervention[,1:388])
Y = data.frame(stimul = dataframe3$intervention[1:388])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design)
# col.stim <- c("darkblue", "purple")
# options(expressions=8000)
plotIndiv(res.2level,ind.names = T, legend=T)
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20, 20)
)
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1, ...)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
library(mixOmics)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
install.packages("spls")
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
library(mixOmics)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
library(spls)
install.packages("pls")
library(mixOmics)
auroc(res.2level, newdata = res.2level$X, outcome.test = as.factor(res.2level$Y),
multilevel = design, plot = TRUE, roc.comp = 1)
auroc(res.2level, plot = TRUE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
data(liver.toxicity)
X <- as.matrix(liver.toxicity$gene)
# Y will be transformed as a factor in the function,
# but we set it as a factor to set up the colors.
Y <- as.factor(liver.toxicity$treatment[, 4])
splsda.liver <- splsda(X, Y, ncomp = 2, keepX = c(20, 20))
auc.splsda.liver = auroc(splsda.liver, ncomp = 1)
X <- scale(dataframe4[,fer],center=T,scale=T)
# Y <- vac18$stimulation
# sample indicates the repeated measurements
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[1:388])
save.image("~/dummy.RData")
dataframe4=dataframe3[389:776,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe4[,fer],center=T,scale=T)
# Y <- vac18$stimulation
# sample indicates the repeated measurements
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[1:388])
save.image("~/dummy2.RData")
dataframe4=dataframe3[,]
correlationMatrix <- cor(dataframe4[,1:2561])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:2561,highlyCorrelated)
X <- scale(dataframe4[,fer],center=T,scale=T)
preX <- scale(dataframe4[,fer],center=T,scale=T)
design <- data.frame(sample = factor(c(1:194,1:194)))
Y = data.frame(stimul = dataframe3$intervention[1:388])
dim(preX)
save.image("~/dummy.RData")
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData1821.txt')
library(rio)
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData1821.txt')
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
object.size(a)
b=a$AlignedData
rm(a)
axisscale=seq(12,-1,-0.001)
colnames(b)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
b=b[,der]
j=apply(b,2,median)
c=apply(b,1,function(x) cor(x,j,method='spearman'))
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
a=a[,der]
j=apply(b,2,median)
c=apply(a,1,function(x) cor(x,j,method='spearman'))
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
a=a[,der]
j=apply(b,2,median)
c=apply(a,1,function(x) cor(x,j,method='spearman'))
j=apply(a,2,median)
c=apply(a,1,function(x) cor(x,j,method='spearman'))
plot(sort((c)))
plot(sort(c))
j=apply(a,2,function(x)median(x,na.rm=T))
c=apply(a,1,function(x) cor(x,j,method='spearman'))
# c=cor(t(b),use='pairwise.complete.obs',method = 'spearman')
plot(sort(c))
d=which(c< 0.4  )
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<dim(e)[1]+1]
f=a[-e,]
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<(dim(e)[1]+1)]
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<(dim(a)[1]+1)]
f=a[-e,]
rm(a)
g=apply(f,2,sd)/colMeans(f)
h=f[,g>1]
rm(f)
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
der=which((axisscale>8.5)|(axisscale>5.4&axisscale<6.9)|(axisscale>4.3&axisscale<5.1)|(axisscale>3.1&axisscale<3.7)|(axisscale<0.7))
der=setdiff(1:13001,der)
a=a[,der]
j=apply(a,2,function(x)median(x,na.rm=T))
c=apply(a,1,function(x) cor(x,j,method='spearman'))
# c=cor(t(b),use='pairwise.complete.obs',method = 'spearman')
plot(sort(c))
d=which(c< 0.4  )
e=unique(c(d-214,d-214*2,d-214*3,d-214*4,d-214*5,d-214*6,d-214*7,d+214,d+214*2,d+214*3,d+214*4,d+214*5,d+214*6,d+214*7,d))
e=e[e>0&e<(dim(a)[1]+1)]
f=a[-e,]
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
h=f[,g>1]
plot(sort(g))
plot(sort(g[1000:4000]))
plot(sort(g[1500:3500]))
plot(sort(g[2000:300]))
plot(sort(g[2000:3000]))
tt=sort(g)
tt[500]
tt[1000]
tt[1500]
tt[2000]
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
h=f[,g>2]
rm(f)
rm(a)
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(194,'notsp'),replicate(194,'tsp'),replicate(194,'notsp'),replicate(194,'tsp')),replicate(194,'notsp'),replicate(194,'tsp'),replicate(194,'notsp'),replicate(194,'tsp')))
1288/8
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(+161,'notsp'),replicate(+161,'tsp'),replicate(+161,'notsp'),replicate(+161,'tsp')),replicate(+161,'notsp'),replicate(+161,'tsp'),replicate(+161,'notsp'),replicate(+161,'tsp')))
dataframe3$intervention=factor(c(replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp')))
library(mlbench)
library(caret)
# load the data
# calculate correlation matrix
dataframe4=dataframe3[,]
correlationMatrix <- cor(dataframe4[,1:dim(dataframe4)[2]])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:dim(dataframe4)[2],highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
correlationMatrix <- cor(dataframe4[,-(dim(dataframe4)[2]])
correlationMatrix <- cor(dataframe4[,-(dim(dataframe4)[2])])
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
# print indexes of highly correlated attributes
print(highlyCorrelated)
fer=setdiff(1:dim(dataframe4)[2],highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
View(dataframe4)
lele=is.na(dataframe4)
View(lele)
lele=all(is.na(dataframe4))
lele=apply(dataframe4,1,all(is.na(x))
)
lele=apply(dataframe4,1,all(is.na())
)
lele=apply(dataframe4,1,function(x)all(is.na(x)))
which(lele)=T
which(lele==T)
lele=apply(dataframe4,2,function(x)all(is.na(x)))
which(lele==T)
lele=is.na(dataframe4)
which(lele==T)
a=import('C:/Bruker/TopSpin3.2/data/Liposcale/analysis data/AlignedData.txt')
axisscale=seq(12,-1,-0.001)
colnames(a)=axisscale
View(a)
e=c(e,13,13+214,13+214*2,13+214*3,13+214*4,13+214*5,13+214*6,13+214*7)
f=a[-e,]
rm(a)
g=apply(f,2,function(x) sd(x,na.rm=T))/colMeans(f,na.rm=T)
h=f[,g>2]
rm(f)
dataframe3=as.data.frame(h)
dataframe3$intervention=factor(c(replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp'),replicate(161,'notsp'),replicate(161,'tsp')))
dataframe3$intervention=factor(c(replicate(160,'notsp'),replicate(160,'tsp'),replicate(160,'notsp'),replicate(160,'tsp'),replicate(160,'notsp'),replicate(160,'tsp'),replicate(160,'notsp'),replicate(160,'tsp')))
library(mlbench)
library(caret)
# load the data
# calculate correlation matrix
dataframe4=dataframe3[,]
correlationMatrix <- cor(dataframe4[,-(dim(dataframe4)[2])])
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.75)
fer=setdiff(1:dim(dataframe4)[2],highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
tail(fer)
fer=setdiff(1:(dim(dataframe4)[2]-1),highlyCorrelated)
preX <- scale(dataframe4[,fer],center=T,scale=T)
dim(preX)
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:160*2])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20, 20))
X=preX[1:160*2,]
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20, 20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,
multilevel = design, plot = TRUE)
X=preX[1:160*2,]
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:160*2])
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20, 20))
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
library(mixOmics)
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
Y = data.frame(stimul = dataframe3$intervention[1:(160*2)])
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
X=preX[(1:160*2),]
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
dim(x)
dim(X)
X=preX[(1:160*2),]
X=preX[1:(160*2),]
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:(160*2)])
res.2level <- splsda(X, Y = Y, ncomp = 2, multilevel = design, keepX = c(20, 20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,
multilevel = design, plot = TRUE)
auroc(res.2level,multilevel = design, plot = TRUE)
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20,20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,multilevel = design, plot = TRUE)
res.2level <- plsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20,20))
plotIndiv(res.2level,ind.names = T, legend=T)
auroc(res.2level,multilevel = design, plot = TRUE)
po=auroc(res.2level,multilevel = design, plot = TRUE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
detach("package:caret", unload=TRUE)
detach("package:mlbench", unload=TRUE)
design <- data.frame(sample = factor(c(1:160,1:160)))
Y = data.frame(stimul = dataframe3$intervention[1:(160*2)])
res.2level <- splsda(X, Y = Y, ncomp = 3, multilevel = design, keepX = c(20, 20,20))
plotIndiv(res.2level,ind.names = T, legend=T)
po=auroc(res.2level,multilevel = design, plot = TRUE)
library(mixOmics)
po=auroc(res.2level,multilevel = design, plot = TRUE)
data(breast.tumors)
X <- breast.tumors$gene.exp
Y <- breast.tumors$sample$treatment
plsda.breast <- plsda(X, Y, ncomp = 2)
auc.plsda.breast = auroc(plsda.breast, ncomp = 1)
## example with sPLSDA
# -----------------
splsda.breast <- splsda(X, Y, ncomp = 2, keepX = c(25, 25))
auroc(plsda.breast, plot = FALSE)
?auroc
save.image("~/dummy.RData")
library(shiny); print(source('Dolphin/R/prova.R')$value)
print(source('Dolphin/R/prova.R')$value)
runApp(list(
ui = bootstrapPage(
selectInput('dataset', 'Choose Dataset', c('mtcars', 'iris')),
selectInput('columns', 'Columns', "")
),
server = function(input, output, session){
outVar = reactive({
mydata = get(input$dataset)
names(mydata)
})
observe({
updateSelectInput(session, "columns",
choices = outVar()
)})
}
))
print(source('Dolphin/R/prova.R')$value)
setwd("C:/Users/user/Documents/Dolphin/R")
source('packages_sources.R')
packages_sources()
compiler::enableJIT(3)
library("minpack.lm")
library("reshape")
library("ggplot2")
library("compiler")
library("robust")
library("apcluster")
library("rio")
library("png")
library(plotly)
library(DT)
library(D3TableFilter)
library(shiny)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
print(source('prova.R')$value)
load("C:/Users/user/Downloads/interface_example.RData")
